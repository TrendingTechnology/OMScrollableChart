//
//class FadeScrollView: UIScrollView, UIScrollViewDelegate {
//
//    let fadePercentage: CGFloat = 0.2
//    let gradientLayer = CAGradientLayer()
//    let transparentColor = UIColor.clear.cgColor
//    let opaqueColor = UIColor.black.cgColor
//
//    var topOpacity: CGColor {
//        let scrollViewHeight = frame.size.height
//        let scrollContentSizeHeight = contentSize.height
//        let scrollOffset = contentOffset.y
//
//        let alpha:CGFloat = (scrollViewHeight >= scrollContentSizeHeight || scrollOffset <= 0) ? 1 : 0
//
//        let color = UIColor(white: 0, alpha: alpha)
//        return color.cgColor
//    }
//
//    var bottomOpacity: CGColor {
//        let scrollViewHeight = frame.size.height
//        let scrollContentSizeHeight = contentSize.height
//        let scrollOffset = contentOffset.y
//
//        let alpha:CGFloat = (scrollViewHeight >= scrollContentSizeHeight || scrollOffset + scrollViewHeight >= scrollContentSizeHeight) ? 1 : 0
//
//        let color = UIColor(white: 0, alpha: alpha)
//        return color.cgColor
//    }
//
//    override func layoutSubviews() {
//        super.layoutSubviews()
//
//        self.delegate = self
//        let maskLayer = CALayer()
//        maskLayer.frame = self.bounds
//
//        gradientLayer.frame = CGRect(x: self.bounds.origin.x, y: 0, width: self.bounds.size.width, height: self.bounds.size.height)
//        gradientLayer.colors = [topOpacity, opaqueColor, opaqueColor, bottomOpacity]
//        gradientLayer.locations = [0, NSNumber(floatLiteral: fadePercentage), NSNumber(floatLiteral: 1 - fadePercentage), 1]
//        maskLayer.addSublayer(gradientLayer)
//
//        self.layer.mask = maskLayer
//    }
//
//    func scrollViewDidScroll(_ scrollView: UIScrollView) {
//        gradientLayer.colors = [topOpacity, opaqueColor, opaqueColor, bottomOpacity]
//    }
//
//}

//    private var pathVertical = UIBezierPath()
  //    private var pathHorizontal = UIBezierPath()

  
  //    var footerView: UIStackView = UIStackView(frame: .zero)
  //    var topView: UIStackView     = UIStackView(frame: .zero)
  

  
  //var singleTap: UITapGestureRecognizer?
  //    var currentLayerIndex: Int = -1
  //    var allLayers = [CAShapeLayer]()
  //    @IBAction func tapRecognized(tap: UITapGestureRecognizer) {
  //        print("tap \(tap.numberOfTouches)")
  //        currentLayerIndex = (currentLayerIndex + 1) % allLayers.count
  //        self.activeLayer = allLayers[currentLayerIndex]
  //        self.allLayers.filter({$0 != self.activeLayer}).forEach({$0.isHidden = true})
  //        self.activeLayer!.isHidden = false
  //        dump(activeLayer)
  //        self.contentView.setNeedsDisplay()
  //    }
  //    var pinchGesture: UIPinchGestureRecognizer?
  //    @IBAction func pinchRecognized(pinch: UIPinchGestureRecognizer) {
  //        let newScale = pinch.scale
  //        print("pitch \(newScale)")
  //        self.numberOfPages = ceil(newScale)
  //        print(newScale)
  //    }

   //    func groupAverage(_ arr: [Float], numberOfElements:Int) -> [Float] {
   //        var result = [Float]();
   //        var sum: Float
   //        let to = arr.count/numberOfElements
   //        var index: Int = 0
   //        for i in stride(from: 0, to: to, by: 1)
   //        {
   //            sum = 0;
   //            //      let xx = (arr.count - numberOfElements * i)
   //            for j in stride(from: 0, to: numberOfElements , by: 1) {
   //                // Check if value is numeric. If not use default value as 0
   //                index = (i*numberOfElements)+j
   //                sum += arr[index]
   //            }
   //
   //            result.append( sum / Float(numberOfElements))
   //
   //        }
   //        let rest = (arr.count % numberOfElements)
   //        if rest > 0  {
   //            sum = 0;
   //            for i in stride(from: arr.count - rest, to: rest, by: 1)
   //            {
   //                sum += arr[i]
   //            }
   //            result.append( sum / Float(rest))
   //
   //        }
   //        return result
   //    }
   
func setupGestures() {
    //self.delaysContentTouches = false
    //self.singleTap = UITapGestureRecognizer(target: self, action: #selector(tapRecognized(tap:)))
    //self.singleTap?.numberOfTapsRequired = 1
    //self.singleTap?.numberOfTouchesRequired = 1
    //self.addGestureRecognizer(singleTap!)
    //self.pinchGesture = UIPinchGestureRecognizer(target: self, action: #selector(pinchRecognized(pinch:)))
    // self.contentView.addGestureRecognizer(self.pinchGesture!)
}
//    // Draw the line.
   //    fileprivate func drawGradientApproximation( ctx: CGContext?) {
   //        if  let ctx = ctx {
   //
   //            let gradientApproximation = CGGradient(colorsSpace: nil, colors: [UIColor.white.withAlphaComponent(0.1).cgColor,
   //                                                                              approximationLineColor.withAlphaComponent(0.8).cgColor,
   //                                                                              approximationLineColor.withAlphaComponent(gradientFadePercentage).cgColor ,
   //                                                                              UIColor.white.withAlphaComponent(0.8).cgColor
   //                /*
   //                 UIColor.black.cgColor*/] as CFArray,
   //                                                   locations: [0, gradientFadePercentage, 1 - gradientFadePercentage, 1] )!
   //
   //
   //            ctx.saveGState()
   //
   //            // Clip to the path, stroke and enjoy.
   //            if  let approximationPath = linePathApproximationPointsLayer.path {
   //
   //
   //                approximationLineColor.setStroke()
   //                let approximationPath = UIBezierPath(cgPath: approximationPath)
   //                approximationPath.lineWidth = approximationLineWidth
   //                approximationPath.stroke()
   //                approximationPath.addClip()
   //
   //                // Draw the gradient in the clipped region
   //                ctx.drawLinearGradient(gradientApproximation,
   //                                       start: CGPoint(x: rootRule!.ruleSize.width, y: 0),
   //                                       end: CGPoint(x: rootRule!.ruleSize.width, y: contentSize.height),
   //                                       options: [.drawsAfterEndLocation])
   //            }
   //
   //
   //
   //            ctx.restoreGState()
   //        }
   //   }
   

   //    func addSubFooterViews() {
   //
   //        for item in footerLabels
   //        {
   //            footerView.removeArrangedSubview(item)
   //            item.removeFromSuperview()
   //        }
   //        footerLabels.removeAll()
   //        //let date = Calendar.current.dateComponents([.day , .month , .year], from: Date())
   //        for index in 0...Int(numberOfSection) - 1
   //        {
   //            let label = UILabel(frame: .zero)
   //            label.translatesAutoresizingMaskIntoConstraints = false
   //            label.text = DateFormatter().monthSymbols[index]
   //            label.textAlignment = .center
   //            label.sizeToFit()
   //            label.backgroundColor = UIColor.white
   //            label.textColor = UIColor.black
   //            //                label.layer.borderColor = UIColor.lightGray.cgColor
   //            //                label.layer.borderWidth = 1
   //            footerView.addArrangedSubview(label)
   //
   //
   //            label.widthAnchor.constraint(equalToConstant: sectionWidth).isActive = true
   //            label.heightAnchor.constraint(equalToConstant: footerViewHeight).isActive = true
   //
   //            footerLabels.append(label)
   //
   //        }
   //
   //        //        for item in topLabels
   //        //        {
   //        //            topView.removeArrangedSubview(item)
   //        //            item.removeFromSuperview()
   //        //        }
   //        //        topLabels.removeAll()
   //        //        for index in 0...Int(numberOfColumns)
   //        //        {
   //        //            let label = UILabel(frame: .zero)
   //        //            label.translatesAutoresizingMaskIntoConstraints = false
   //        //            //label.text = DateFormatter().shortWeekdaySymbols[0]
   //        //            label.textAlignment = .center
   //        //            //label.sizeToFit()
   //        //            label.backgroundColor = UIColor(white: CGFloat(CGFloat(1.0 / Double(numberOfColumns)) * CGFloat(index)), alpha: 1.0)
   //        //            label.textColor = UIColor.black
   //        //            label.layer.borderColor = UIColor.lightGray.cgColor
   //        //            label.layer.borderWidth = 1
   //        //            topView.addArrangedSubview(label)
   //        //
   //        //
   //        //            label.widthAnchor.constraint(equalToConstant: itemWidth).isActive = true
   //        //            label.heightAnchor.constraint(equalToConstant: topViewHeight).isActive = true
   //        //
   //        //            topLabels.append(label)
   //        //
   //        //        }
   //
   //    }
   

/*
 
 
 //        let newApproximationRatio = 1.0 / (scale / (maximumZoomScale - minimumZoomScale))
 //        self.approximationRatio = newApproximationRatio
 
 var pinchGesture = UIPinchGestureRecognizer()
 
 Use this code
 
 override func viewDidLoad() {
 super.viewDidLoad()
 
 self.textview1.userInteractionEnabled = true
 self.textview1.multipleTouchEnabled = true
 
 self.pinchGesture = UIPinchGestureRecognizer(target: self, action:#selector(pinchRecognized(_:)))
 self.textview1.addGestureRecognizer(self.pinchGesture)
 
 // Do any additional setup after loading the view.
 }
 
 @IBAction func pinchRecognized(pinch: UIPinchGestureRecognizer) {
 let fontSize = self.textview1.font!.pointSize*(pinch.scale)/2
 if fontSize > 12 && fontSize < 32{
 textview1.font = UIFont(name: self.textview1.font!.fontName, size:fontSize)
 }
 }
 */



